# This configuration file specifies which programs should be run
# when the specified event occurs in problem directory lifetime.
#
# It consists of directives and rules.
#
# Directives start with a reserved word. Currently, there is only one
# directive, "include". Its format is "include FILE".
# It causes files which match FILE to be read and
# parsed as if they are inserted textually where this directive
# occurs. FILE can use shell pattern metacharacters (*,?,etc) to
# specify multiple files. Relative paths are interpreted relative
# to current file.
#
# Rule starts with a line with non-space leading character.
# All subsequent lines which start with space or tab form one rule.
# Note that separating newline is *retained*. Example:
# EVENT=post-create   date >/tmp/dt  # semicolon is not needed here!
#                     echo $HOSTNAME `uname -r`
#
# Rules may be commented out with #. One # is sufficient to comment out
# even a multi-line rule (no need to comment out every line).
#
# Rules specify which programs to run on the problem directory.
# Each rule may have conditions to be checked before the program is run.
#
# Conditions have form VAR=VAL or VAL~=REGEX, where VAR is either
# word "EVENT" or a name of problem directory element to be checked
# (for example, "executable", "package", hostname" etc).
#
# If all conditions match, the remaining part of the rule
# (the "program" part) is run in the shell.
# All shell language constructs are valid.
# All stdout and stderr output is captured and passed to abrt
# and possibly to abrt's frontends and shown to the user.
#
# If the program terminates with nonzero exit code,
# the event processing is considered unsuccessful and is stopped.
# Last captured output line, if any, is considered to be
# the error message indicating the reason of the failure,
# and may be used by abrt as such.
#
# If the program terminates successfully, next rule is read
# and processed. This process is repeated until the end of this file.

EVENT=report_uReport type=anaconda
    # TODO: find a better way how to create core_backtrace
    cat backtrace  | sed 's/^  File \"\([^\"]\+\)\", line \([0-9]\+\), in \(.*\)$/\1 \2 \3/;tx;d;:x' > core_backtrace2

    for f in `cat core_backtrace2 | cut -f1 -d' '`; do
        if [ -e $f ]; then
            sha1sum $f
        else
            echo "- $"
        fi
    done | tr -s ' ' | awk '{print $2, $1}' > build_ids

    join build_ids core_backtrace2 | cut -f2- -d ' ' > core_backtrace

    rm -f core_backtrace2

    reporter-ureport

EVENT=post_report type=anaconda
    reporter-ureport -r

EVENT=report_Bugzilla type=anaconda
    reporter-bugzilla -b \
        -F /etc/libreport/plugins/bugzilla_format_anaconda.conf \
        -A /etc/libreport/plugins/bugzilla_formatdup_anaconda.conf

EVENT=report_Uploader type=anaconda
    reporter-upload
